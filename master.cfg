# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
c['workers'] = [
    worker.Worker("linux-worker", "passvvord",
                  defaultProperties={'parallel_make': 4}),
    worker.Worker("raspi4-worker",  "passvvord",
                  defaultProperties={'parallel_make': 2}),
    worker.Worker("msys2-worker",   "passvvord",
                  defaultProperties={'parallel_make': 2}),
]

####### CODEBASES

#grendRepo     = r"git://github.com/grend3d/grend.git"
#landscapeRepo = r"git://github.com/grend3d/landscape-demo.git"
#bulletRepo    = r"git://github.com/grend3d/bullet.git"
grendRepo     = r"http://10.0.1.10:3000/grend3d/grend.git"
landscapeRepo = r"http://10.0.1.10:3000/grend3d/landscape-demo.git"
bulletRepo    = r"http://10.0.1.10:3000/grend3d/bullet.git"
projectRepo   = r"http://10.0.1.10:3000/grend3d/projectalpha.git"

all_repositories = {
    bulletRepo    : "bullet",
    grendRepo     : "grend",
    landscapeRepo : "landscape-demo",
    projectRepo   : "projectalpha"
}

def codebaseGenerator(chdict):
    ret = all_repositories[chdict["repository"]]
    print(str(ret))
    return ret;

c['codebaseGenerator'] = codebaseGenerator

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(
    changes.GitPoller(
        grendRepo,
        workdir='grendpoll-workdir',
        branch='master',
        pollInterval=30,
    ))

c['change_source'].append(
    changes.GitPoller(
        landscapeRepo,
        workdir='landscapepoll-workdir',
        branch='main',
        pollInterval=30,
    ))

c['change_source'].append(
    changes.GitPoller(
        projectRepo,
        workdir='projectpoll-workdir',
        branch='main',
        pollInterval=30,
    ))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

libBuilders = [
    "build-grend-linux",
    "build-grend-raspi",
    "build-grend-msys2",
]

demoBuilders = [
    "build-demo-linux",
    "build-demo-raspi",
    "build-demo-msys2",
]

projBuilders = [
    "build-project-linux",
    "build-project-raspi",
    "build-project-msys2",
]

projTesters = [
    "test-project-linux",
    "test-project-raspi",
    "test-project-msys2",
]

allBuilders = libBuilders + demoBuilders + projBuilders
allCodebases = list(all_repositories.values())
print("8====================D")
print(allCodebases)
allTesters = projTesters
#allCodebases = ["bullet", "grend", "landscape-demo"]

c['schedulers'] = []
c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="lib-updates",
        treeStableTimer=None,
        builderNames=allBuilders,
        change_filter = util.ChangeFilter(
            repository = grendRepo,
            codebase = "grend",
        ),
        #codebases=["bullet", "grend"],
        codebases=allCodebases,
    ))

c['schedulers'].append(
    schedulers.SingleBranchScheduler(
        name="demo-updates",
        treeStableTimer=None,
        builderNames=demoBuilders,
        change_filter = util.ChangeFilter(
            repository = landscapeRepo,
            codebase = "landscape-demo",
        ),
        #codebases=["bullet", "grend", "landscape-demo"],
        codebases=allCodebases,
    ))

projectUpdates = \
    schedulers.SingleBranchScheduler(
        name="project-updates",
        treeStableTimer=30,
        builderNames=projBuilders,
        change_filter = util.ChangeFilter(
            repository = projectRepo,
            codebase = "projectalpha",
        ),
        #codebases=["bullet", "grend", "projectalpha"],
        codebases=allCodebases,
    )
#c['schedulers'].append(projectUpdates)

projectTests = \
    schedulers.Dependent(
        name="project-tests",
        upstream=projectUpdates,
        builderNames=projTesters,
        codebases=allCodebases,
    )

c['schedulers'].append(projectUpdates)
c['schedulers'].append(projectTests)

c['schedulers'].append(
    schedulers.ForceScheduler(
        name="force",
        builderNames=allBuilders,
        codebases=allCodebases
    ))

c['schedulers'].append(
    schedulers.ForceScheduler(
        name="force-tests",
        builderNames=projTesters,
        #codebases=["bullet", "grend", "projectalpha"]
        codebases=allCodebases,
    ))

"""
from buildbot.scheduler import Try_Userpass
c['schedulers'].append(
    Try_Userpass(
        name="try",
        builderNames=allBuilders,
        port=5555,
        userpass=[("sampleuser", "samplepass")],
        codebases=allCodebases
    ))
"""

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def makeGrendSteps(pkgconfigPath=None, cmakeFlags={}, workdir="grend-master"):
    envs = {}
    flags = { "CMAKE_INSTALL_PREFIX": "grendbuild", }
    flags.update(cmakeFlags)
    print("XXXXXX")
    print(str(flags))

    # need to specify the system package include path on msys,
    # this seems like the least painful way to do that
    if pkgconfigPath:
        envs.update({"PKG_CONFIG_PATH": pkgconfigPath})

    return [
        steps.Git(
            name="Checkout grend",
            codebase="grend",
            workdir=workdir,

            mode='incremental',
            repourl=grendRepo,
            branch="master",
            submodules=True,
        ),
        steps.CMake(
            generator="Unix Makefiles",
            definitions=flags,
            options=[],
            env=envs,

            workdir=workdir,
        ),
        steps.Compile(
            command=["make", "-j2"],

            workdir=workdir,
        ),
        steps.ShellCommand(
            name="Install",
            command=["make", "install"],

            workdir=workdir,
        ),
    ]

def makeDemosteps(pkgconfigPath=None, cmakeFlags={}):
    pkgconf = "../grend-master/grendbuild/lib/pkgconfig"
    flags = { "CMAKE_INSTALL_PREFIX": "demobuild", }
    flags.update(cmakeFlags)
    print("XXXXXX")
    print(str(flags))

    # need to specify the system package include path on msys,
    # this seems like the least painful way to do that
    if pkgconfigPath:
        pkgconf += ":" + pkgconfigPath

    return [
        steps.Git(
            name = "Checkout landscape-demo",

            mode='incremental',
            repourl=landscapeRepo,
            branch="main",
            submodules=True,

            codebase="landscape-demo",
            workdir = "landscape-demo-main",
        ),
        steps.SetProperty(
            property="PKG_CONFIG_PATH",
            value="/tmp/grendbuild-demo/lib/pkgconfig",

            workdir = "landscape-demo-main",
        ),
        steps.SetProperty(
            property="SomeProperty",
            value=util.Interpolate("sch=%(prop:scheduler)s, worker=%(prop:workername)s"),

            workdir = "landscape-demo-main",
        ),
        steps.CMake(
            generator="Unix Makefiles",
            definitions=flags,
            options=[],
            env={"PKG_CONFIG_PATH": pkgconf},

            workdir = "landscape-demo-main",
        ),
        steps.Compile(
            command=["make", "-j2"],
            workdir = "landscape-demo-main",
        ),
        steps.ShellCommand(
            name="Install",
            command=["make", "install"],
            workdir = "landscape-demo-main",
        ),
    ]

def makeProjectsteps(pkgconfigPath=None, cmakeFlags={}):
    pkgconf = "../grend-master/grendbuild/lib/pkgconfig"
    flags = { "CMAKE_INSTALL_PREFIX": "projbuild", }
    flags.update(cmakeFlags)
    print("XXXXXX")
    print(str(flags))

    # need to specify the system package include path on msys,
    # this seems like the least painful way to do that
    if pkgconfigPath:
        pkgconf += ":" + pkgconfigPath

    return [
        steps.Git(
            name = "Checkout projectalpha",

            mode='incremental',
            repourl=projectRepo,
            branch="main",
            submodules=True,

            codebase="projectalpha",
            workdir = "projectalpha-main",
        ),
        steps.SetProperty(
            property="PKG_CONFIG_PATH",
            value="/tmp/grendbuild-demo/lib/pkgconfig",

            workdir = "projectalpha-main",
        ),
        steps.SetProperty(
            property="SomeProperty",
            value=util.Interpolate("sch=%(prop:scheduler)s, worker=%(prop:workername)s"),

            workdir = "projectalpha-main",
        ),
        steps.CMake(
            generator="Unix Makefiles",
            definitions=flags,
            options=[],
            env={"PKG_CONFIG_PATH": pkgconf},

            workdir = "projectalpha-main",
        ),
        steps.Compile(
            command=["make", "-j2"],
            workdir = "projectalpha-main",
        ),
        steps.ShellCommand(
            name="Install",
            command=["make", "install"],
            workdir = "projectalpha-main",
        ),
    ]

libFactory = util.BuildFactory()
libFactory.addSteps(makeGrendSteps())

libFactoryMSys = util.BuildFactory()
libFactoryMSys.addStep(
    steps.Git(
        name="Checkout bullet",
        codebase="bullet",
        workdir="grend-master/bullet",

        mode='incremental',
        repourl=bulletRepo,
        branch="master",
    ))

libFactoryMSys.addSteps(
    makeGrendSteps(
        pkgconfigPath="/mingw64/lib/pkgconfig",
        cmakeFlags={
            "MINGW": 1,
            "BULLET_PHYSICS_SOURCE_DIR": "bullet",
            "CMAKE_VERBOSE_MAKEFILE": "1",
        },
    ))


demoFactoryUnix = util.BuildFactory()
demoFactoryUnix.addSteps(makeGrendSteps())
demoFactoryUnix.addSteps(makeDemosteps())

demoFactoryMSys = util.BuildFactory()
# msys2 builds will use in-tree grend and bullet libs
demoFactoryMSys.addStep(
    steps.Git(
        name="Checkout bullet",
        codebase="bullet",
        workdir="landscape-demo-main/bullet",

        mode='incremental',
        repourl=bulletRepo,
        branch="master",
    ))

demoFactoryMSys.addStep(
    steps.Git(
        name="Checkout grend",
        codebase="grend",
        workdir="landscape-demo-main/grend",

        mode='incremental',
        repourl=grendRepo,
        branch="master",
        submodules=True,
    ))

demoFactoryMSys.addSteps(
    makeDemosteps(
        pkgconfigPath="/mingw64/lib/pkgconfig",
        cmakeFlags={
            "MINGW": "1",
            "CMAKE_VERBOSE_MAKEFILE": "1",
        },
    ))

### projectalpha builder factories
projFactoryUnix = util.BuildFactory()
projFactoryUnix.addSteps(makeGrendSteps())
projFactoryUnix.addSteps(makeProjectsteps())

projFactoryMSys = util.BuildFactory()
projFactoryMSys.addStep(
    steps.Git(
        name="Checkout bullet",
        codebase="bullet",
        workdir="projectalpha-main/bullet",

        mode='incremental',
        repourl=bulletRepo,
        branch="master",
    ))

projFactoryMSys.addStep(
    steps.Git(
        name="Checkout grend",
        codebase="grend",
        workdir="projectalpha-main/grend",

        mode='incremental',
        repourl=grendRepo,
        branch="master",
        submodules=True,
    ))

projFactoryMSys.addSteps(
    makeProjectsteps(
        pkgconfigPath="/mingw64/lib/pkgconfig",
        cmakeFlags={
            "MINGW": "1",
            "CMAKE_VERBOSE_MAKEFILE": "1",
        },
    ))

### projectalpha tester factories
def makeTester(projdir, installdir, execname, testTarget="default"):
    execpath = projdir + "/" + installdir + "/" + execname

    return [
        steps.ShellCommand(
            name="Test",
            command=["echo", "execpath: ", execpath],
            workdir = projdir,
        ),
        steps.ShellCommand(
            name="pwd",
            command=["pwd"],
            workdir = projdir,
        ),
        steps.ShellCommand(
            name="ls",
            command=["ls"],
            workdir = projdir,
        ),
        steps.FileExists(file = execpath,),
        steps.ShellCommand(
            name="run",
            command=[installdir + "/" + execname],
            workdir = projdir,
            # TODO: should also set LD_LIBRARY_PATH and PATH
            env = {
                "DISPLAY": ":0", # XXX: assume :0 as X server on unixen
                "GREND_TEST_TARGET": testTarget,
            },
        ),
    ]

projTestFactoryUnix = util.BuildFactory()
projTestFactoryUnix.addSteps(
    makeTester(
        projdir="projectalpha-main",
        installdir="projbuild",
        execname="bin/landscape-demo",
    ))

projTestFactoryMSys = util.BuildFactory()
projTestFactoryMSys.addSteps(
    makeTester(
        projdir="projectalpha-main",
        installdir="projbuild",
        execname="bin/landscape-demo.exe",
    ))

### library builders
c['builders'] = []
c['builders'].append(
    util.BuilderConfig(
        name="build-grend-linux",
        workernames=["linux-worker"],
        factory=libFactory
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-grend-raspi",
        workernames=["raspi4-worker"],
        factory=libFactory
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-grend-msys2",
        workernames=["msys2-worker"],
        factory=libFactoryMSys
    ))

### landscape demo builders
c['builders'].append(
    util.BuilderConfig(
        name="build-demo-linux",
        workernames=["linux-worker"],
        factory=demoFactoryUnix
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-demo-raspi",
        workernames=["raspi4-worker"],
        factory=demoFactoryUnix
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-demo-msys2",
        workernames=["msys2-worker"],
        factory=demoFactoryMSys
    ))

### projectalpha builders
c['builders'].append(
    util.BuilderConfig(
        name="build-project-linux",
        workernames=["linux-worker"],
        factory=projFactoryUnix
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-project-raspi",
        workernames=["raspi4-worker"],
        factory=projFactoryUnix
    ))

c['builders'].append(
    util.BuilderConfig(
        name="build-project-msys2",
        workernames=["msys2-worker"],
        factory=projFactoryMSys
    ))

### projectalpha testers
### TODO: this could all be parameterized
c['builders'].append(
    util.BuilderConfig(
        name="test-project-linux",
        workernames=["linux-worker"],
        factory=projTestFactoryUnix,
        workerbuilddir="build-project-linux",
    ))

c['builders'].append(
    util.BuilderConfig(
        name="test-project-raspi",
        workernames=["raspi4-worker"],
        factory=projTestFactoryUnix,
        workerbuilddir="build-project-raspi",
    ))

c['builders'].append(
    util.BuilderConfig(
        name="test-project-msys2",
        workernames=["msys2-worker"],
        factory=projTestFactoryMSys,
        workerbuilddir="build-project-msys2",
    ))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Grend CI"
c['titleURL'] = "https://github.com/grend3d"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

#c['buildbotURL'] = "http://localhost:8010/"
c['buildbotURL'] = "http://10.0.1.9:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.
    # It's easy to start with sqlite, but it's recommended to switch to a dedicated
    # database, such as PostgreSQL or MySQL, for use in production environments.
    # http://docs.buildbot.net/current/manual/configuration/global.html#database-specification
    'db_url' : "sqlite:///state.sqlite",
}
